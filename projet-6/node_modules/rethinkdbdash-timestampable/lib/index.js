'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

/*
Copyright (c) 2016, Marco Sampellegrini <babbonatale@alpacaaa.net>
Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee
is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.
THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE
INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
*/

var defaultOptions = {
  insertedAtKey: 'insertedAt',
  updatedAtKey: 'updatedAt'
};

exports.default = function (db) {
  var userOptions = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];


  var options = _extends({}, defaultOptions, userOptions);

  var originalInsert = db._Term.prototype.insert;
  var originalUpdate = db._Term.prototype.update;

  var insertedAtKey = options.insertedAtKey;
  var updatedAtKey = options.updatedAtKey;


  db._Term.prototype.insert = function (documents) {

    var isObject = documents instanceof Object;

    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    if (!isObject) {
      return originalInsert.call.apply(originalInsert, [this, documents].concat(args));
    }

    var array = documents instanceof Array ? documents : [documents];
    var updatedDocuments = array.map(function (d) {
      return _extends({}, d, _defineProperty({}, insertedAtKey, new Date()));
    });

    return originalInsert.call.apply(originalInsert, [this, updatedDocuments].concat(args));
  };

  db._Term.prototype.update = function (newValue) {

    var isObject = newValue instanceof Object;

    var updatedValue = isObject ? _extends({}, newValue, _defineProperty({}, updatedAtKey, new Date())) : newValue;

    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    return originalUpdate.call.apply(originalUpdate, [this, updatedValue].concat(args));
  };
};